#!/bin/bash

# Script para validar os comandos bash antes de executar
# Execute: ./validate-scripts.sh

echo "üîç Validando Scripts Bash para Deploy Seguro"
echo "============================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se os scripts existem
print_status "Verificando se os scripts existem..."

if [ ! -f "nginx-proxy-config.sh" ]; then
    print_error "nginx-proxy-config.sh n√£o encontrado!"
    exit 1
fi

if [ ! -f "deploy-wss-server-nginx.sh" ]; then
    print_error "deploy-wss-server-nginx.sh n√£o encontrado!"
    exit 1
fi

print_success "Scripts encontrados!"

# Verificar permiss√µes
print_status "Verificando permiss√µes dos scripts..."

if [ ! -x "nginx-proxy-config.sh" ]; then
    print_warning "nginx-proxy-config.sh n√£o tem permiss√£o de execu√ß√£o. Corrigindo..."
    chmod +x nginx-proxy-config.sh
fi

if [ ! -x "deploy-wss-server-nginx.sh" ]; then
    print_warning "deploy-wss-server-nginx.sh n√£o tem permiss√£o de execu√ß√£o. Corrigindo..."
    chmod +x deploy-wss-server-nginx.sh
fi

print_success "Permiss√µes corretas!"

# Verificar sintaxe bash
print_status "Verificando sintaxe bash..."

if bash -n nginx-proxy-config.sh; then
    print_success "nginx-proxy-config.sh: sintaxe OK"
else
    print_error "nginx-proxy-config.sh: erro de sintaxe!"
    exit 1
fi

if bash -n deploy-wss-server-nginx.sh; then
    print_success "deploy-wss-server-nginx.sh: sintaxe OK"
else
    print_error "deploy-wss-server-nginx.sh: erro de sintaxe!"
    exit 1
fi

# Verificar comandos cr√≠ticos
print_status "Verificando comandos cr√≠ticos..."

CRITICAL_COMMANDS=("nginx" "docker" "certbot" "systemctl" "curl")

for cmd in "${CRITICAL_COMMANDS[@]}"; do
    if command -v "$cmd" &> /dev/null; then
        print_success "$cmd: dispon√≠vel"
    else
        print_warning "$cmd: n√£o encontrado (ser√° instalado se necess√°rio)"
    fi
fi

# Verificar se Nginx est√° rodando
print_status "Verificando status do Nginx..."

if systemctl is-active --quiet nginx 2>/dev/null; then
    print_success "Nginx est√° rodando"
    
    # Verificar portas
    if netstat -tlnp 2>/dev/null | grep -q ":80 "; then
        print_success "Porta 80 est√° em uso pelo Nginx"
    else
        print_warning "Porta 80 n√£o est√° em uso"
    fi
    
    if netstat -tlnp 2>/dev/null | grep -q ":443 "; then
        print_success "Porta 443 est√° em uso pelo Nginx"
    else
        print_warning "Porta 443 n√£o est√° em uso"
    fi
else
    print_warning "Nginx n√£o est√° rodando"
fi

# Verificar se Docker est√° rodando
print_status "Verificando status do Docker..."

if systemctl is-active --quiet docker 2>/dev/null; then
    print_success "Docker est√° rodando"
else
    print_warning "Docker n√£o est√° rodando (ser√° iniciado se necess√°rio)"
fi

# Verificar espa√ßo em disco
print_status "Verificando espa√ßo em disco..."

DISK_USAGE=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -lt 80 ]; then
    print_success "Espa√ßo em disco OK ($DISK_USAGE% usado)"
else
    print_warning "Espa√ßo em disco baixo ($DISK_USAGE% usado)"
fi

# Verificar mem√≥ria
print_status "Verificando mem√≥ria dispon√≠vel..."

MEMORY_AVAILABLE=$(free -m | awk 'NR==2{printf "%.0f", $7}')
if [ "$MEMORY_AVAILABLE" -gt 512 ]; then
    print_success "Mem√≥ria OK (${MEMORY_AVAILABLE}MB dispon√≠vel)"
else
    print_warning "Mem√≥ria baixa (${MEMORY_AVAILABLE}MB dispon√≠vel)"
fi

echo ""
print_success "‚úÖ Valida√ß√£o conclu√≠da!"
echo ""
print_status "üìã Resumo dos comandos seguros:"
echo "======================================"
echo "1. sudo ./nginx-proxy-config.sh"
echo "   - ‚úÖ N√ÉO para o Nginx existente"
echo "   - ‚úÖ Apenas adiciona configura√ß√£o para cubevisservice.site"
echo "   - ‚úÖ Faz backup da configura√ß√£o atual"
echo ""
echo "2. sudo ./deploy-wss-server-nginx.sh"
echo "   - ‚úÖ Usa webroot para certificados (n√£o para Nginx)"
echo "   - ‚úÖ Container roda na porta 8080 (n√£o conflita)"
echo "   - ‚úÖ Nginx faz proxy 80/443 ‚Üí 8080"
echo ""
echo "3. curl -I https://cubevisservice.site"
echo "   - ‚úÖ Testa se o site est√° funcionando"
echo "   - ‚úÖ Verifica certificado SSL"
echo ""
print_success "üöÄ Scripts validados e seguros para execu√ß√£o!"
